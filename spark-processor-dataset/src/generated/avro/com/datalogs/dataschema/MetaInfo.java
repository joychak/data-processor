/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.datalogs.dataschema;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/**  */
@org.apache.avro.specific.AvroGenerated
public class MetaInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1885627931130840390L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MetaInfo\",\"namespace\":\"com.datalogs.dataschema\",\"doc\":\"\",\"fields\":[{\"name\":\"eventUTC\",\"type\":\"long\",\"doc\":\"FORMAT:milliseconds|Derived field for storing datetime value from utc_datetime field in UTC. Will be equal to processingUTC in cases where utc ts cannot be calculated\"},{\"name\":\"sourceHost\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Derived field for storing source machine name which sent us the file\"},{\"name\":\"sourceName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Derived field for storing source filename\"},{\"name\":\"batchId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"batchId\"},{\"name\":\"processingUTC\",\"type\":\"long\",\"doc\":\"FORMAT:milliseconds|Derived field for storing record write time in UTC.\"},{\"name\":\"isValidEventUTC\",\"type\":\"int\",\"doc\":\"FORMAT:0 or 1. 0 -- In Case eventts is inferred correctly. 1 -- In cases where eventUTC is defaulted to processingUTC \"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MetaInfo> ENCODER =
      new BinaryMessageEncoder<MetaInfo>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MetaInfo> DECODER =
      new BinaryMessageDecoder<MetaInfo>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<MetaInfo> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<MetaInfo> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<MetaInfo>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this MetaInfo to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a MetaInfo from a ByteBuffer. */
  public static MetaInfo fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** FORMAT:milliseconds|Derived field for storing datetime value from utc_datetime field in UTC. Will be equal to processingUTC in cases where utc ts cannot be calculated */
  @Deprecated public long eventUTC;
  /** Derived field for storing source machine name which sent us the file */
  @Deprecated public java.lang.String sourceHost;
  /** Derived field for storing source filename */
  @Deprecated public java.lang.String sourceName;
  /** batchId */
  @Deprecated public java.lang.String batchId;
  /** FORMAT:milliseconds|Derived field for storing record write time in UTC. */
  @Deprecated public long processingUTC;
  /** FORMAT:0 or 1. 0 -- In Case eventts is inferred correctly. 1 -- In cases where eventUTC is defaulted to processingUTC  */
  @Deprecated public int isValidEventUTC;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MetaInfo() {}

  /**
   * All-args constructor.
   * @param eventUTC FORMAT:milliseconds|Derived field for storing datetime value from utc_datetime field in UTC. Will be equal to processingUTC in cases where utc ts cannot be calculated
   * @param sourceHost Derived field for storing source machine name which sent us the file
   * @param sourceName Derived field for storing source filename
   * @param batchId batchId
   * @param processingUTC FORMAT:milliseconds|Derived field for storing record write time in UTC.
   * @param isValidEventUTC FORMAT:0 or 1. 0 -- In Case eventts is inferred correctly. 1 -- In cases where eventUTC is defaulted to processingUTC 
   */
  public MetaInfo(java.lang.Long eventUTC, java.lang.String sourceHost, java.lang.String sourceName, java.lang.String batchId, java.lang.Long processingUTC, java.lang.Integer isValidEventUTC) {
    this.eventUTC = eventUTC;
    this.sourceHost = sourceHost;
    this.sourceName = sourceName;
    this.batchId = batchId;
    this.processingUTC = processingUTC;
    this.isValidEventUTC = isValidEventUTC;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return eventUTC;
    case 1: return sourceHost;
    case 2: return sourceName;
    case 3: return batchId;
    case 4: return processingUTC;
    case 5: return isValidEventUTC;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: eventUTC = (java.lang.Long)value$; break;
    case 1: sourceHost = (java.lang.String)value$; break;
    case 2: sourceName = (java.lang.String)value$; break;
    case 3: batchId = (java.lang.String)value$; break;
    case 4: processingUTC = (java.lang.Long)value$; break;
    case 5: isValidEventUTC = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'eventUTC' field.
   * @return FORMAT:milliseconds|Derived field for storing datetime value from utc_datetime field in UTC. Will be equal to processingUTC in cases where utc ts cannot be calculated
   */
  public java.lang.Long getEventUTC() {
    return eventUTC;
  }

  /**
   * Sets the value of the 'eventUTC' field.
   * FORMAT:milliseconds|Derived field for storing datetime value from utc_datetime field in UTC. Will be equal to processingUTC in cases where utc ts cannot be calculated
   * @param value the value to set.
   */
  public void setEventUTC(java.lang.Long value) {
    this.eventUTC = value;
  }

  /**
   * Gets the value of the 'sourceHost' field.
   * @return Derived field for storing source machine name which sent us the file
   */
  public java.lang.String getSourceHost() {
    return sourceHost;
  }

  /**
   * Sets the value of the 'sourceHost' field.
   * Derived field for storing source machine name which sent us the file
   * @param value the value to set.
   */
  public void setSourceHost(java.lang.String value) {
    this.sourceHost = value;
  }

  /**
   * Gets the value of the 'sourceName' field.
   * @return Derived field for storing source filename
   */
  public java.lang.String getSourceName() {
    return sourceName;
  }

  /**
   * Sets the value of the 'sourceName' field.
   * Derived field for storing source filename
   * @param value the value to set.
   */
  public void setSourceName(java.lang.String value) {
    this.sourceName = value;
  }

  /**
   * Gets the value of the 'batchId' field.
   * @return batchId
   */
  public java.lang.String getBatchId() {
    return batchId;
  }

  /**
   * Sets the value of the 'batchId' field.
   * batchId
   * @param value the value to set.
   */
  public void setBatchId(java.lang.String value) {
    this.batchId = value;
  }

  /**
   * Gets the value of the 'processingUTC' field.
   * @return FORMAT:milliseconds|Derived field for storing record write time in UTC.
   */
  public java.lang.Long getProcessingUTC() {
    return processingUTC;
  }

  /**
   * Sets the value of the 'processingUTC' field.
   * FORMAT:milliseconds|Derived field for storing record write time in UTC.
   * @param value the value to set.
   */
  public void setProcessingUTC(java.lang.Long value) {
    this.processingUTC = value;
  }

  /**
   * Gets the value of the 'isValidEventUTC' field.
   * @return FORMAT:0 or 1. 0 -- In Case eventts is inferred correctly. 1 -- In cases where eventUTC is defaulted to processingUTC 
   */
  public java.lang.Integer getIsValidEventUTC() {
    return isValidEventUTC;
  }

  /**
   * Sets the value of the 'isValidEventUTC' field.
   * FORMAT:0 or 1. 0 -- In Case eventts is inferred correctly. 1 -- In cases where eventUTC is defaulted to processingUTC 
   * @param value the value to set.
   */
  public void setIsValidEventUTC(java.lang.Integer value) {
    this.isValidEventUTC = value;
  }

  /**
   * Creates a new MetaInfo RecordBuilder.
   * @return A new MetaInfo RecordBuilder
   */
  public static com.datalogs.dataschema.MetaInfo.Builder newBuilder() {
    return new com.datalogs.dataschema.MetaInfo.Builder();
  }

  /**
   * Creates a new MetaInfo RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MetaInfo RecordBuilder
   */
  public static com.datalogs.dataschema.MetaInfo.Builder newBuilder(com.datalogs.dataschema.MetaInfo.Builder other) {
    return new com.datalogs.dataschema.MetaInfo.Builder(other);
  }

  /**
   * Creates a new MetaInfo RecordBuilder by copying an existing MetaInfo instance.
   * @param other The existing instance to copy.
   * @return A new MetaInfo RecordBuilder
   */
  public static com.datalogs.dataschema.MetaInfo.Builder newBuilder(com.datalogs.dataschema.MetaInfo other) {
    return new com.datalogs.dataschema.MetaInfo.Builder(other);
  }

  /**
   * RecordBuilder for MetaInfo instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MetaInfo>
    implements org.apache.avro.data.RecordBuilder<MetaInfo> {

    /** FORMAT:milliseconds|Derived field for storing datetime value from utc_datetime field in UTC. Will be equal to processingUTC in cases where utc ts cannot be calculated */
    private long eventUTC;
    /** Derived field for storing source machine name which sent us the file */
    private java.lang.String sourceHost;
    /** Derived field for storing source filename */
    private java.lang.String sourceName;
    /** batchId */
    private java.lang.String batchId;
    /** FORMAT:milliseconds|Derived field for storing record write time in UTC. */
    private long processingUTC;
    /** FORMAT:0 or 1. 0 -- In Case eventts is inferred correctly. 1 -- In cases where eventUTC is defaulted to processingUTC  */
    private int isValidEventUTC;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.datalogs.dataschema.MetaInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.eventUTC)) {
        this.eventUTC = data().deepCopy(fields()[0].schema(), other.eventUTC);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sourceHost)) {
        this.sourceHost = data().deepCopy(fields()[1].schema(), other.sourceHost);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sourceName)) {
        this.sourceName = data().deepCopy(fields()[2].schema(), other.sourceName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.batchId)) {
        this.batchId = data().deepCopy(fields()[3].schema(), other.batchId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.processingUTC)) {
        this.processingUTC = data().deepCopy(fields()[4].schema(), other.processingUTC);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.isValidEventUTC)) {
        this.isValidEventUTC = data().deepCopy(fields()[5].schema(), other.isValidEventUTC);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing MetaInfo instance
     * @param other The existing instance to copy.
     */
    private Builder(com.datalogs.dataschema.MetaInfo other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.eventUTC)) {
        this.eventUTC = data().deepCopy(fields()[0].schema(), other.eventUTC);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sourceHost)) {
        this.sourceHost = data().deepCopy(fields()[1].schema(), other.sourceHost);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sourceName)) {
        this.sourceName = data().deepCopy(fields()[2].schema(), other.sourceName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.batchId)) {
        this.batchId = data().deepCopy(fields()[3].schema(), other.batchId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.processingUTC)) {
        this.processingUTC = data().deepCopy(fields()[4].schema(), other.processingUTC);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.isValidEventUTC)) {
        this.isValidEventUTC = data().deepCopy(fields()[5].schema(), other.isValidEventUTC);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'eventUTC' field.
      * FORMAT:milliseconds|Derived field for storing datetime value from utc_datetime field in UTC. Will be equal to processingUTC in cases where utc ts cannot be calculated
      * @return The value.
      */
    public java.lang.Long getEventUTC() {
      return eventUTC;
    }

    /**
      * Sets the value of the 'eventUTC' field.
      * FORMAT:milliseconds|Derived field for storing datetime value from utc_datetime field in UTC. Will be equal to processingUTC in cases where utc ts cannot be calculated
      * @param value The value of 'eventUTC'.
      * @return This builder.
      */
    public com.datalogs.dataschema.MetaInfo.Builder setEventUTC(long value) {
      validate(fields()[0], value);
      this.eventUTC = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'eventUTC' field has been set.
      * FORMAT:milliseconds|Derived field for storing datetime value from utc_datetime field in UTC. Will be equal to processingUTC in cases where utc ts cannot be calculated
      * @return True if the 'eventUTC' field has been set, false otherwise.
      */
    public boolean hasEventUTC() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'eventUTC' field.
      * FORMAT:milliseconds|Derived field for storing datetime value from utc_datetime field in UTC. Will be equal to processingUTC in cases where utc ts cannot be calculated
      * @return This builder.
      */
    public com.datalogs.dataschema.MetaInfo.Builder clearEventUTC() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sourceHost' field.
      * Derived field for storing source machine name which sent us the file
      * @return The value.
      */
    public java.lang.String getSourceHost() {
      return sourceHost;
    }

    /**
      * Sets the value of the 'sourceHost' field.
      * Derived field for storing source machine name which sent us the file
      * @param value The value of 'sourceHost'.
      * @return This builder.
      */
    public com.datalogs.dataschema.MetaInfo.Builder setSourceHost(java.lang.String value) {
      validate(fields()[1], value);
      this.sourceHost = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sourceHost' field has been set.
      * Derived field for storing source machine name which sent us the file
      * @return True if the 'sourceHost' field has been set, false otherwise.
      */
    public boolean hasSourceHost() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sourceHost' field.
      * Derived field for storing source machine name which sent us the file
      * @return This builder.
      */
    public com.datalogs.dataschema.MetaInfo.Builder clearSourceHost() {
      sourceHost = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'sourceName' field.
      * Derived field for storing source filename
      * @return The value.
      */
    public java.lang.String getSourceName() {
      return sourceName;
    }

    /**
      * Sets the value of the 'sourceName' field.
      * Derived field for storing source filename
      * @param value The value of 'sourceName'.
      * @return This builder.
      */
    public com.datalogs.dataschema.MetaInfo.Builder setSourceName(java.lang.String value) {
      validate(fields()[2], value);
      this.sourceName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'sourceName' field has been set.
      * Derived field for storing source filename
      * @return True if the 'sourceName' field has been set, false otherwise.
      */
    public boolean hasSourceName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'sourceName' field.
      * Derived field for storing source filename
      * @return This builder.
      */
    public com.datalogs.dataschema.MetaInfo.Builder clearSourceName() {
      sourceName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'batchId' field.
      * batchId
      * @return The value.
      */
    public java.lang.String getBatchId() {
      return batchId;
    }

    /**
      * Sets the value of the 'batchId' field.
      * batchId
      * @param value The value of 'batchId'.
      * @return This builder.
      */
    public com.datalogs.dataschema.MetaInfo.Builder setBatchId(java.lang.String value) {
      validate(fields()[3], value);
      this.batchId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'batchId' field has been set.
      * batchId
      * @return True if the 'batchId' field has been set, false otherwise.
      */
    public boolean hasBatchId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'batchId' field.
      * batchId
      * @return This builder.
      */
    public com.datalogs.dataschema.MetaInfo.Builder clearBatchId() {
      batchId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'processingUTC' field.
      * FORMAT:milliseconds|Derived field for storing record write time in UTC.
      * @return The value.
      */
    public java.lang.Long getProcessingUTC() {
      return processingUTC;
    }

    /**
      * Sets the value of the 'processingUTC' field.
      * FORMAT:milliseconds|Derived field for storing record write time in UTC.
      * @param value The value of 'processingUTC'.
      * @return This builder.
      */
    public com.datalogs.dataschema.MetaInfo.Builder setProcessingUTC(long value) {
      validate(fields()[4], value);
      this.processingUTC = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'processingUTC' field has been set.
      * FORMAT:milliseconds|Derived field for storing record write time in UTC.
      * @return True if the 'processingUTC' field has been set, false otherwise.
      */
    public boolean hasProcessingUTC() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'processingUTC' field.
      * FORMAT:milliseconds|Derived field for storing record write time in UTC.
      * @return This builder.
      */
    public com.datalogs.dataschema.MetaInfo.Builder clearProcessingUTC() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'isValidEventUTC' field.
      * FORMAT:0 or 1. 0 -- In Case eventts is inferred correctly. 1 -- In cases where eventUTC is defaulted to processingUTC 
      * @return The value.
      */
    public java.lang.Integer getIsValidEventUTC() {
      return isValidEventUTC;
    }

    /**
      * Sets the value of the 'isValidEventUTC' field.
      * FORMAT:0 or 1. 0 -- In Case eventts is inferred correctly. 1 -- In cases where eventUTC is defaulted to processingUTC 
      * @param value The value of 'isValidEventUTC'.
      * @return This builder.
      */
    public com.datalogs.dataschema.MetaInfo.Builder setIsValidEventUTC(int value) {
      validate(fields()[5], value);
      this.isValidEventUTC = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'isValidEventUTC' field has been set.
      * FORMAT:0 or 1. 0 -- In Case eventts is inferred correctly. 1 -- In cases where eventUTC is defaulted to processingUTC 
      * @return True if the 'isValidEventUTC' field has been set, false otherwise.
      */
    public boolean hasIsValidEventUTC() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'isValidEventUTC' field.
      * FORMAT:0 or 1. 0 -- In Case eventts is inferred correctly. 1 -- In cases where eventUTC is defaulted to processingUTC 
      * @return This builder.
      */
    public com.datalogs.dataschema.MetaInfo.Builder clearIsValidEventUTC() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MetaInfo build() {
      try {
        MetaInfo record = new MetaInfo();
        record.eventUTC = fieldSetFlags()[0] ? this.eventUTC : (java.lang.Long) defaultValue(fields()[0]);
        record.sourceHost = fieldSetFlags()[1] ? this.sourceHost : (java.lang.String) defaultValue(fields()[1]);
        record.sourceName = fieldSetFlags()[2] ? this.sourceName : (java.lang.String) defaultValue(fields()[2]);
        record.batchId = fieldSetFlags()[3] ? this.batchId : (java.lang.String) defaultValue(fields()[3]);
        record.processingUTC = fieldSetFlags()[4] ? this.processingUTC : (java.lang.Long) defaultValue(fields()[4]);
        record.isValidEventUTC = fieldSetFlags()[5] ? this.isValidEventUTC : (java.lang.Integer) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MetaInfo>
    WRITER$ = (org.apache.avro.io.DatumWriter<MetaInfo>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MetaInfo>
    READER$ = (org.apache.avro.io.DatumReader<MetaInfo>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
